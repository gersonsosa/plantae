package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import edu.udistrital.plantae.logicadominio.datosespecimen.Habito;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HABITO.
*/
public class HabitoDao extends AbstractDao<Habito, Long> {

    public static final String TABLENAME = "HABITO";

    /**
     * Properties of entity Habito.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Habito = new Property(1, String.class, "habito", false, "HABITO");
        public final static Property HabitosID = new Property(2, Long.class, "habitosID", false, "HABITOS_ID");
    };

    private Query<Habito> habitos_DataQuery;

    public HabitoDao(DaoConfig config) {
        super(config);
    }
    
    public HabitoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HABITO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'HABITO' TEXT," + // 1: habito
                "'HABITOS_ID' INTEGER);"); // 2: habitosID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_HABITO_HABITOS_ID ON HABITO" +
                " (HABITOS_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HABITO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Habito entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String habito = entity.getHabito();
        if (habito != null) {
            stmt.bindString(2, habito);
        }
 
        Long habitosID = entity.getHabitosID();
        if (habitosID != null) {
            stmt.bindLong(3, habitosID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Habito readEntity(Cursor cursor, int offset) {
        Habito entity = new Habito();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Habito entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHabito(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHabitosID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Habito entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Habito entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of Habitos. */
    public List<Habito> _queryHabitos_Data(Long habitosID) {
        synchronized (this) {
            if (habitos_DataQuery == null) {
                QueryBuilder<Habito> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HabitosID.eq(null));
                habitos_DataQuery = queryBuilder.build();
            }
        }
        Query<Habito> query = habitos_DataQuery.forCurrentThread();
        query.setParameter(0, habitosID);
        return query.list();
    }

}

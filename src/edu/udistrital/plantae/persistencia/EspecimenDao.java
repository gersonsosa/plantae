package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import edu.udistrital.plantae.logicadominio.datosespecimen.*;
import edu.udistrital.plantae.logicadominio.recoleccion.Recoleccion;
import edu.udistrital.plantae.logicadominio.ubicacion.Localidad;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ESPECIMEN.
*/
public class EspecimenDao extends AbstractDao<Especimen, Long> {

    public static final String TABLENAME = "ESPECIMEN";

    private EspecimenDetalladoDao especimenDetalladoDao;
    private EspecimenSencilloDao especimenSencilloDao;

    /**
     * Properties of entity Especimen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NumeroDeColeccion = new Property(1, String.class, "numeroDeColeccion", false, "NUMERO_DE_COLECCION");
        public final static Property Abundancia = new Property(2, String.class, "abundancia", false, "ABUNDANCIA");
        public final static Property Fenologia = new Property(3, String.class, "fenologia", false, "FENOLOGIA");
        public final static Property DescripcionEspecimen = new Property(4, String.class, "descripcionEspecimen", false, "DESCRIPCION_ESPECIMEN");
        public final static Property AlturaDeLaPlanta = new Property(5, Long.class, "alturaDeLaPlanta", false, "ALTURA_DE_LA_PLANTA");
        public final static Property Dap = new Property(6, Long.class, "dap", false, "DAP");
        public final static Property RecoleccionID = new Property(7, long.class, "recoleccionID", false, "RECOLECCION_ID");
        public final static Property IdentidadTaxonomicaID = new Property(8, Long.class, "identidadTaxonomicaID", false, "IDENTIDAD_TAXONOMICA_ID");
        public final static Property HabitoID = new Property(9, Long.class, "habitoID", false, "HABITO_ID");
        public final static Property HabitatID = new Property(10, Long.class, "habitatID", false, "HABITAT_ID");
        public final static Property LocalidadID = new Property(11, Long.class, "localidadID", false, "LOCALIDAD_ID");
        public final static Property RaizID = new Property(12, Long.class, "raizID", false, "RAIZ_ID");
        public final static Property TalloID = new Property(13, Long.class, "talloID", false, "TALLO_ID");
        public final static Property InflorescenciaID = new Property(14, Long.class, "inflorescenciaID", false, "INFLORESCENCIA_ID");
        public final static Property FrutoID = new Property(15, Long.class, "frutoID", false, "FRUTO_ID");
        public final static Property FlorID = new Property(16, Long.class, "florID", false, "FLOR_ID");
        public final static Property HojaID = new Property(17, Long.class, "hojaID", false, "HOJA_ID");
        public final static Property Tipo = new Property(18, String.class, "tipo", false, "TIPO");
    };

    private DaoSession daoSession;


    public EspecimenDao(DaoConfig config) {
        super(config);
    }
    
    public EspecimenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ESPECIMEN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NUMERO_DE_COLECCION' TEXT," + // 1: numeroDeColeccion
                "'ABUNDANCIA' TEXT," + // 2: abundancia
                "'FENOLOGIA' TEXT," + // 3: fenologia
                "'DESCRIPCION_ESPECIMEN' TEXT," + // 4: descripcionEspecimen
                "'ALTURA_DE_LA_PLANTA' INTEGER," + // 5: alturaDeLaPlanta
                "'DAP' INTEGER," + // 6: dap
                "'RECOLECCION_ID' INTEGER NOT NULL ," + // 7: recoleccionID
                "'IDENTIDAD_TAXONOMICA_ID' INTEGER," + // 8: identidadTaxonomicaID
                "'HABITO_ID' INTEGER," + // 9: habitoID
                "'HABITAT_ID' INTEGER," + // 10: habitatID
                "'LOCALIDAD_ID' INTEGER," + // 11: localidadID
                "'RAIZ_ID' INTEGER," + // 12: raizID
                "'TALLO_ID' INTEGER," + // 13: talloID
                "'INFLORESCENCIA_ID' INTEGER," + // 14: inflorescenciaID
                "'FRUTO_ID' INTEGER," + // 15: frutoID
                "'FLOR_ID' INTEGER," + // 16: florID
                "'HOJA_ID' INTEGER," + // 17: hojaID
                "'TIPO' TEXT);"); // 18: tipo
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_NUMERO_DE_COLECCION ON ESPECIMEN" +
                " (NUMERO_DE_COLECCION);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_RECOLECCION_ID ON ESPECIMEN" +
                " (RECOLECCION_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_IDENTIDAD_TAXONOMICA_ID ON ESPECIMEN" +
                " (IDENTIDAD_TAXONOMICA_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_HABITO_ID ON ESPECIMEN" +
                " (HABITO_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_HABITAT_ID ON ESPECIMEN" +
                " (HABITAT_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_LOCALIDAD_ID ON ESPECIMEN" +
                " (LOCALIDAD_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_RAIZ_ID ON ESPECIMEN" +
                " (RAIZ_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_TALLO_ID ON ESPECIMEN" +
                " (TALLO_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_INFLORESCENCIA_ID ON ESPECIMEN" +
                " (INFLORESCENCIA_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_FRUTO_ID ON ESPECIMEN" +
                " (FRUTO_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_FLOR_ID ON ESPECIMEN" +
                " (FLOR_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ESPECIMEN_HOJA_ID ON ESPECIMEN" +
                " (HOJA_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ESPECIMEN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Especimen entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        /*String numeroDeColeccion = entity.getNumeroDeColeccion();
        if (numeroDeColeccion != null) {
            stmt.bindString(2, numeroDeColeccion);
        }
 
        String abundancia = entity.getAbundancia();
        if (abundancia != null) {
            stmt.bindString(3, abundancia);
        }
 
        String fenologia = entity.getFenologia();
        if (fenologia != null) {
            stmt.bindString(4, fenologia);
        }
 
        String descripcionEspecimen = entity.getDescripcionEspecimen();
        if (descripcionEspecimen != null) {
            stmt.bindString(5, descripcionEspecimen);
        }
 
        Long alturaDeLaPlanta = entity.getAlturaDeLaPlanta();
        if (alturaDeLaPlanta != null) {
            stmt.bindLong(6, alturaDeLaPlanta);
        }
 
        Long dap = entity.getDap();
        if (dap != null) {
            stmt.bindLong(7, dap);
        }
        stmt.bindLong(8, entity.getRecoleccionID());
 
        Long identidadTaxonomicaID = entity.getIdentidadTaxonomicaID();
        if (identidadTaxonomicaID != null) {
            stmt.bindLong(9, identidadTaxonomicaID);
        }
 
        Long habitoID = entity.getHabitoID();
        if (habitoID != null) {
            stmt.bindLong(10, habitoID);
        }
 
        Long habitatID = entity.getHabitatID();
        if (habitatID != null) {
            stmt.bindLong(11, habitatID);
        }
 
        Long localidadID = entity.getLocalidadID();
        if (localidadID != null) {
            stmt.bindLong(12, localidadID);
        }
 
        Long raizID = entity.getRaizID();
        if (raizID != null) {
            stmt.bindLong(13, raizID);
        }
 
        Long talloID = entity.getTalloID();
        if (talloID != null) {
            stmt.bindLong(14, talloID);
        }
 
        Long inflorescenciaID = entity.getInflorescenciaID();
        if (inflorescenciaID != null) {
            stmt.bindLong(15, inflorescenciaID);
        }
 
        Long frutoID = entity.getFrutoID();
        if (frutoID != null) {
            stmt.bindLong(16, frutoID);
        }
 
        Long florID = entity.getFlorID();
        if (florID != null) {
            stmt.bindLong(17, florID);
        }
 
        Long hojaID = entity.getHojaID();
        if (hojaID != null) {
            stmt.bindLong(18, hojaID);
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(19, tipo);
        }*/
    }

    @Override
    protected void attachEntity(Especimen entity) {
        super.attachEntity(entity);
        if (entity instanceof EspecimenSencillo){
        	((EspecimenSencillo)entity).__setDaoSession(daoSession);
        }else if (entity instanceof EspecimenDetallado){
        	((EspecimenDetallado)entity).__setDaoSession(daoSession);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Especimen readEntity(Cursor cursor, int offset) {
    	Especimen entity = null;
    	String tipo = cursor.getString(offset + 7);
		if (tipo.equals("ES")){
			entity = new EspecimenSencillo();
		}else if (tipo.equals("ED")){
			entity = new EspecimenDetallado();
		}
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Especimen entity, int offset) {
    	if (entity instanceof EspecimenSencillo){
    		especimenSencilloDao.readEntity(cursor, (EspecimenSencillo) entity, offset);
    	}else if(entity instanceof EspecimenDetallado){
    		especimenDetalladoDao.readEntity(cursor, (EspecimenDetallado) entity, offset);
    	}

        /*entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumeroDeColeccion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAbundancia(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFenologia(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescripcionEspecimen(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlturaDeLaPlanta(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDap(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRecoleccionID(cursor.getLong(offset + 7));
        entity.setIdentidadTaxonomicaID(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setHabitoID(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setHabitatID(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setLocalidadID(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setRaizID(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setTalloID(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setInflorescenciaID(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setFrutoID(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setFlorID(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setHojaID(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setTipo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));*/
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Especimen entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Especimen entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getHabitoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getHabitatDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getLocalidadDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getInflorescenciaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getHojaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getFrutoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T6", daoSession.getTalloDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T7", daoSession.getRaizDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T8", daoSession.getFlorDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T9", daoSession.getRecoleccionDao().getAllColumns());
            builder.append(" FROM ESPECIMEN T");
            builder.append(" LEFT JOIN HABITO T0 ON T.'HABITO_ID'=T0.'_id'");
            builder.append(" LEFT JOIN HABITAT T1 ON T.'HABITAT_ID'=T1.'_id'");
            builder.append(" LEFT JOIN LOCALIDAD T2 ON T.'LOCALIDAD_ID'=T2.'_id'");
            builder.append(" LEFT JOIN INFLORESCENCIA T3 ON T.'INFLORESCENCIA_ID'=T3.'_id'");
            builder.append(" LEFT JOIN HOJA T4 ON T.'HOJA_ID'=T4.'_id'");
            builder.append(" LEFT JOIN FRUTO T5 ON T.'FRUTO_ID'=T5.'_id'");
            builder.append(" LEFT JOIN TALLO T6 ON T.'TALLO_ID'=T6.'_id'");
            builder.append(" LEFT JOIN RAIZ T7 ON T.'RAIZ_ID'=T7.'_id'");
            builder.append(" LEFT JOIN FLOR T8 ON T.'FLOR_ID'=T8.'_id'");
            builder.append(" LEFT JOIN RECOLECCION T9 ON T.'RECOLECCION_ID'=T9.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Especimen loadCurrentDeep(Cursor cursor, boolean lock) {
        Especimen entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Habito habito = loadCurrentOther(daoSession.getHabitoDao(), cursor, offset);
        /*entity.setHabito(habito);*/
        offset += daoSession.getHabitoDao().getAllColumns().length;

        Habitat habitat = loadCurrentOther(daoSession.getHabitatDao(), cursor, offset);
        /*entity.setHabitat(habitat);*/
        offset += daoSession.getHabitatDao().getAllColumns().length;

        Localidad localidad = loadCurrentOther(daoSession.getLocalidadDao(), cursor, offset);
        /*entity.setLocalidad(localidad);*/
        offset += daoSession.getLocalidadDao().getAllColumns().length;

        Inflorescencia inflorescencia = loadCurrentOther(daoSession.getInflorescenciaDao(), cursor, offset);
        /*entity.setInflorescencia(inflorescencia);*/
        offset += daoSession.getInflorescenciaDao().getAllColumns().length;

        Hoja hoja = loadCurrentOther(daoSession.getHojaDao(), cursor, offset);
        /*entity.setHoja(hoja);*/
        offset += daoSession.getHojaDao().getAllColumns().length;

        Fruto fruto = loadCurrentOther(daoSession.getFrutoDao(), cursor, offset);
        /*entity.setFruto(fruto);*/
        offset += daoSession.getFrutoDao().getAllColumns().length;

        Tallo tallo = loadCurrentOther(daoSession.getTalloDao(), cursor, offset);
        /*entity.setTallo(tallo);*/
        offset += daoSession.getTalloDao().getAllColumns().length;

        Raiz raiz = loadCurrentOther(daoSession.getRaizDao(), cursor, offset);
        /*entity.setRaiz(raiz);*/
        offset += daoSession.getRaizDao().getAllColumns().length;

        Flor flor = loadCurrentOther(daoSession.getFlorDao(), cursor, offset);
        /*entity.setFlor(flor);*/
        offset += daoSession.getFlorDao().getAllColumns().length;

        Recoleccion recoleccion = loadCurrentOther(daoSession.getRecoleccionDao(), cursor, offset);
        /*if(recoleccion != null) {
            entity.setRecoleccion(recoleccion);
        }*/

        if (entity instanceof EspecimenSencillo){
            ((EspecimenSencillo)entity).setHabito(habito);
            ((EspecimenSencillo)entity).setHabitat(habitat);
            ((EspecimenSencillo)entity).setLocalidad(localidad);
            ((EspecimenSencillo)entity).setFlor(flor);
            if(recoleccion != null) {
                ((EspecimenSencillo)entity).setRecoleccion(recoleccion);
            }
        }else if (entity instanceof EspecimenDetallado){
            ((EspecimenDetallado)entity).setHabito(habito);
            ((EspecimenDetallado)entity).setHabitat(habitat);
            ((EspecimenDetallado)entity).setLocalidad(localidad);
            ((EspecimenDetallado)entity).setInflorescencia(inflorescencia);
            ((EspecimenDetallado)entity).setHoja(hoja);
            ((EspecimenDetallado)entity).setFruto(fruto);
            ((EspecimenDetallado)entity).setTallo(tallo);
            ((EspecimenDetallado)entity).setRaiz(raiz);
            ((EspecimenDetallado)entity).setFlor(flor);
            if(recoleccion != null) {
                ((EspecimenDetallado)entity).setRecoleccion(recoleccion);
            }
        }

        return entity;    
    }

    public Especimen loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Especimen> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Especimen> list = new ArrayList<Especimen>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Especimen> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Especimen> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import edu.udistrital.plantae.logicadominio.ubicacion.Departamento;
import edu.udistrital.plantae.logicadominio.ubicacion.Municipio;
import edu.udistrital.plantae.logicadominio.ubicacion.Pais;
import edu.udistrital.plantae.logicadominio.ubicacion.Region;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REGION.
*/
public class RegionDao extends AbstractDao<Region, Long> {

    public static final String TABLENAME = "REGION";

    /**
     * Properties of entity Region.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pais = new Property(1, String.class, "pais", false, "PAIS");
        public final static Property Departamento = new Property(2, String.class, "departamento", false, "DEPARTAMENTO");
        public final static Property Municipio = new Property(3, String.class, "municipio", false, "MUNICIPIO");
        public final static Property Rango = new Property(4, String.class, "rango", false, "RANGO");
        public final static Property NombreCompleto = new Property(5, String.class, "nombreCompleto", false, "NOMBRE_COMPLETO");
    };


    public RegionDao(DaoConfig config) {
        super(config);
    }
    
    public RegionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REGION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PAIS' TEXT," + // 1: pais
                "'DEPARTAMENTO' TEXT," + // 2: departamento
                "'MUNICIPIO' TEXT," + // 3: municipio
                "'RANGO' TEXT," + // 4: rango
                "'NOMBRE_COMPLETO' TEXT);"); // 5: nombreCompleto
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_REGION_PAIS ON REGION" +
                " (PAIS);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_REGION_DEPARTAMENTO ON REGION" +
                " (DEPARTAMENTO);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_REGION_MUNICIPIO ON REGION" +
                " (MUNICIPIO);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_REGION_NOMBRE_COMPLETO ON REGION" +
                " (NOMBRE_COMPLETO);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REGION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Region entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String rango = "";
        String nombre = entity.getNombre();
        if (entity instanceof Pais){
            if (nombre != null) {
                stmt.bindString(2, nombre);
                rango = "pais";
            }
        }
        if (entity instanceof Departamento){
            String pais = entity.getRegionPadre().getNombre();
            if (pais != null){
                stmt.bindString(2, pais);
            }
            if (nombre != null) {
                stmt.bindString(3, nombre);
            }
            rango = "departamento";
        }
        if (entity instanceof Municipio){
            String pais = entity.getRegionPadre().getRegionPadre().getNombre();
            if (pais != null){
                stmt.bindString(2, pais);
            }
            String departamento = entity.getRegionPadre().getNombre();
            if (departamento != null) {
                stmt.bindString(3, departamento);
            }
            if (nombre != null) {
                stmt.bindString(4, nombre);
            }
            rango = "municipio";
        }
        stmt.bindString(5, rango);
        /*String pais = entity.getPais();
        if (pais != null) {
            stmt.bindString(2, pais);
        }
 
        String departamento = entity.getDepartamento();
        if (departamento != null) {
            stmt.bindString(3, departamento);
        }
 
        String municipio = entity.getMunicipio();
        if (municipio != null) {
            stmt.bindString(4, municipio);
        }
 
        String rango = entity.getRango();
        if (rango != null) {
            stmt.bindString(5, rango);
        }*/
 
        String nombreCompleto = entity.getNombreCompleto();
        if (nombreCompleto != null) {
            stmt.bindString(6, nombreCompleto);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Region readEntity(Cursor cursor, int offset) {
        Region entity = null;
        String rango = cursor.getString(offset + 4);
        if (rango.equals("pais")){
            entity = new Pais();
        }else if (rango.equals("departamento")){
            entity = new Departamento();
        }else if (rango.equals("municipio")){
            entity = new Municipio();
        }
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Region entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        if (entity instanceof Pais){
            entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        }
        if (entity instanceof Departamento){
            Region pais = new Pais(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
            entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
            entity.setRegionPadre(pais);
        }
        if (entity instanceof Municipio){
            Region pais = new Pais(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
            Region departamento = new Departamento(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
            entity.setNombre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
            departamento.setRegionPadre(pais);
            entity.setRegionPadre(departamento);
        }
        entity.setNombreCompleto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Region entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Region entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package edu.udistrital.plantae.persistencia;

import android.database.sqlite.SQLiteDatabase;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;
import edu.udistrital.plantae.logicadominio.autenticacion.Persona;
import edu.udistrital.plantae.logicadominio.autenticacion.Usuario;
import edu.udistrital.plantae.logicadominio.datosespecimen.*;
import edu.udistrital.plantae.logicadominio.recoleccion.ColectorPrincipal;
import edu.udistrital.plantae.logicadominio.recoleccion.ColectorSecundario;
import edu.udistrital.plantae.logicadominio.recoleccion.Proyecto;
import edu.udistrital.plantae.logicadominio.recoleccion.Viaje;
import edu.udistrital.plantae.logicadominio.taxonomia.IdentidadTaxonomica;
import edu.udistrital.plantae.logicadominio.taxonomia.NombreComun;
import edu.udistrital.plantae.logicadominio.taxonomia.Taxon;
import edu.udistrital.plantae.logicadominio.taxonomia.Uso;
import edu.udistrital.plantae.logicadominio.ubicacion.Localidad;
import edu.udistrital.plantae.logicadominio.ubicacion.Region;

import java.util.Map;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig personaDaoConfig;
    private final DaoConfig usuarioDaoConfig;
    private final DaoConfig colectorPrincipalDaoConfig;
    private final DaoConfig colectorSecundarioDaoConfig;
    private final DaoConfig proyectoDaoConfig;
    private final DaoConfig viajeDaoConfig;
    private final DaoConfig especimenDaoConfig;
    private final DaoConfig colorEspecimenDaoConfig;
    private final DaoConfig colorMunsellDaoConfig;
    private final DaoConfig florDaoConfig;
    private final DaoConfig fotografiaDaoConfig;
    private final DaoConfig frutoDaoConfig;
    private final DaoConfig habitatDaoConfig;
    private final DaoConfig fenologiaDaoConfig;
    private final DaoConfig habitoDaoConfig;
    private final DaoConfig hojaDaoConfig;
    private final DaoConfig inflorescenciaDaoConfig;
    private final DaoConfig raizDaoConfig;
    private final DaoConfig talloDaoConfig;
    private final DaoConfig muestraAsociadaDaoConfig;
    private final DaoConfig identidadTaxonomicaDaoConfig;
    private final DaoConfig nombreComunDaoConfig;
    private final DaoConfig taxonDaoConfig;
    private final DaoConfig usoDaoConfig;
    private final DaoConfig localidadDaoConfig;
    private final DaoConfig regionDaoConfig;

    private final PersonaDao personaDao;
    private final UsuarioDao usuarioDao;
    private final ColectorPrincipalDao colectorPrincipalDao;
    private final ColectorSecundarioDao colectorSecundarioDao;
    private final ProyectoDao proyectoDao;
    private final ViajeDao viajeDao;
    private final EspecimenDao especimenDao;
    private final ColorEspecimenDao colorEspecimenDao;
    private final ColorMunsellDao colorMunsellDao;
    private final FlorDao florDao;
    private final FotografiaDao fotografiaDao;
    private final FrutoDao frutoDao;
    private final HabitatDao habitatDao;
    private final FenologiaDao fenologiaDao;
    private final HabitoDao habitoDao;
    private final HojaDao hojaDao;
    private final InflorescenciaDao inflorescenciaDao;
    private final RaizDao raizDao;
    private final TalloDao talloDao;
    private final MuestraAsociadaDao muestraAsociadaDao;
    private final IdentidadTaxonomicaDao identidadTaxonomicaDao;
    private final NombreComunDao nombreComunDao;
    private final TaxonDao taxonDao;
    private final UsoDao usoDao;
    private final LocalidadDao localidadDao;
    private final RegionDao regionDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        personaDaoConfig = daoConfigMap.get(PersonaDao.class).clone();
        personaDaoConfig.initIdentityScope(type);

        usuarioDaoConfig = daoConfigMap.get(UsuarioDao.class).clone();
        usuarioDaoConfig.initIdentityScope(type);

        colectorPrincipalDaoConfig = daoConfigMap.get(ColectorPrincipalDao.class).clone();
        colectorPrincipalDaoConfig.initIdentityScope(type);

        colectorSecundarioDaoConfig = daoConfigMap.get(ColectorSecundarioDao.class).clone();
        colectorSecundarioDaoConfig.initIdentityScope(type);

        proyectoDaoConfig = daoConfigMap.get(ProyectoDao.class).clone();
        proyectoDaoConfig.initIdentityScope(type);

        viajeDaoConfig = daoConfigMap.get(ViajeDao.class).clone();
        viajeDaoConfig.initIdentityScope(type);

        especimenDaoConfig = daoConfigMap.get(EspecimenDao.class).clone();
        especimenDaoConfig.initIdentityScope(type);

        colorEspecimenDaoConfig = daoConfigMap.get(ColorEspecimenDao.class).clone();
        colorEspecimenDaoConfig.initIdentityScope(type);

        colorMunsellDaoConfig = daoConfigMap.get(ColorMunsellDao.class).clone();
        colorMunsellDaoConfig.initIdentityScope(type);

        florDaoConfig = daoConfigMap.get(FlorDao.class).clone();
        florDaoConfig.initIdentityScope(type);

        fotografiaDaoConfig = daoConfigMap.get(FotografiaDao.class).clone();
        fotografiaDaoConfig.initIdentityScope(type);

        frutoDaoConfig = daoConfigMap.get(FrutoDao.class).clone();
        frutoDaoConfig.initIdentityScope(type);

        habitatDaoConfig = daoConfigMap.get(HabitatDao.class).clone();
        habitatDaoConfig.initIdentityScope(type);

        fenologiaDaoConfig = daoConfigMap.get(FenologiaDao.class).clone();
        fenologiaDaoConfig.initIdentityScope(type);

        habitoDaoConfig = daoConfigMap.get(HabitoDao.class).clone();
        habitoDaoConfig.initIdentityScope(type);

        hojaDaoConfig = daoConfigMap.get(HojaDao.class).clone();
        hojaDaoConfig.initIdentityScope(type);

        inflorescenciaDaoConfig = daoConfigMap.get(InflorescenciaDao.class).clone();
        inflorescenciaDaoConfig.initIdentityScope(type);

        raizDaoConfig = daoConfigMap.get(RaizDao.class).clone();
        raizDaoConfig.initIdentityScope(type);

        talloDaoConfig = daoConfigMap.get(TalloDao.class).clone();
        talloDaoConfig.initIdentityScope(type);

        muestraAsociadaDaoConfig = daoConfigMap.get(MuestraAsociadaDao.class).clone();
        muestraAsociadaDaoConfig.initIdentityScope(type);

        identidadTaxonomicaDaoConfig = daoConfigMap.get(IdentidadTaxonomicaDao.class).clone();
        identidadTaxonomicaDaoConfig.initIdentityScope(type);

        nombreComunDaoConfig = daoConfigMap.get(NombreComunDao.class).clone();
        nombreComunDaoConfig.initIdentityScope(type);

        taxonDaoConfig = daoConfigMap.get(TaxonDao.class).clone();
        taxonDaoConfig.initIdentityScope(type);

        usoDaoConfig = daoConfigMap.get(UsoDao.class).clone();
        usoDaoConfig.initIdentityScope(type);

        localidadDaoConfig = daoConfigMap.get(LocalidadDao.class).clone();
        localidadDaoConfig.initIdentityScope(type);

        regionDaoConfig = daoConfigMap.get(RegionDao.class).clone();
        regionDaoConfig.initIdentityScope(type);

        personaDao = new PersonaDao(personaDaoConfig, this);
        usuarioDao = new UsuarioDao(usuarioDaoConfig, this);
        colectorPrincipalDao = new ColectorPrincipalDao(colectorPrincipalDaoConfig, this);
        colectorSecundarioDao = new ColectorSecundarioDao(colectorSecundarioDaoConfig, this);
        proyectoDao = new ProyectoDao(proyectoDaoConfig, this);
        viajeDao = new ViajeDao(viajeDaoConfig, this);
        especimenDao = new EspecimenDao(especimenDaoConfig, this);
        colorEspecimenDao = new ColorEspecimenDao(colorEspecimenDaoConfig, this);
        colorMunsellDao = new ColorMunsellDao(colorMunsellDaoConfig, this);
        florDao = new FlorDao(florDaoConfig, this);
        fotografiaDao = new FotografiaDao(fotografiaDaoConfig, this);
        frutoDao = new FrutoDao(frutoDaoConfig, this);
        habitatDao = new HabitatDao(habitatDaoConfig, this);
        fenologiaDao = new FenologiaDao(fenologiaDaoConfig, this);
        habitoDao = new HabitoDao(habitoDaoConfig, this);
        hojaDao = new HojaDao(hojaDaoConfig, this);
        inflorescenciaDao = new InflorescenciaDao(inflorescenciaDaoConfig, this);
        raizDao = new RaizDao(raizDaoConfig, this);
        talloDao = new TalloDao(talloDaoConfig, this);
        muestraAsociadaDao = new MuestraAsociadaDao(muestraAsociadaDaoConfig, this);
        identidadTaxonomicaDao = new IdentidadTaxonomicaDao(identidadTaxonomicaDaoConfig, this);
        nombreComunDao = new NombreComunDao(nombreComunDaoConfig, this);
        taxonDao = new TaxonDao(taxonDaoConfig, this);
        usoDao = new UsoDao(usoDaoConfig, this);
        localidadDao = new LocalidadDao(localidadDaoConfig, this);
        regionDao = new RegionDao(regionDaoConfig, this);

        registerDao(Persona.class, personaDao);
        registerDao(Usuario.class, usuarioDao);
        registerDao(ColectorPrincipal.class, colectorPrincipalDao);
        registerDao(ColectorSecundario.class, colectorSecundarioDao);
        registerDao(Proyecto.class, proyectoDao);
        registerDao(Viaje.class, viajeDao);
        registerDao(Especimen.class, especimenDao);
        registerDao(ColorEspecimen.class, colorEspecimenDao);
        registerDao(ColorMunsell.class, colorMunsellDao);
        registerDao(Flor.class, florDao);
        registerDao(Fotografia.class, fotografiaDao);
        registerDao(Fruto.class, frutoDao);
        registerDao(Habitat.class, habitatDao);
        registerDao(Fenologia.class, fenologiaDao);
        registerDao(Habito.class, habitoDao);
        registerDao(Hoja.class, hojaDao);
        registerDao(Inflorescencia.class, inflorescenciaDao);
        registerDao(Raiz.class, raizDao);
        registerDao(Tallo.class, talloDao);
        registerDao(MuestraAsociada.class, muestraAsociadaDao);
        registerDao(IdentidadTaxonomica.class, identidadTaxonomicaDao);
        registerDao(NombreComun.class, nombreComunDao);
        registerDao(Taxon.class, taxonDao);
        registerDao(Uso.class, usoDao);
        registerDao(Localidad.class, localidadDao);
        registerDao(Region.class, regionDao);
    }
    
    public void clear() {
        personaDaoConfig.getIdentityScope().clear();
        usuarioDaoConfig.getIdentityScope().clear();
        colectorPrincipalDaoConfig.getIdentityScope().clear();
        colectorSecundarioDaoConfig.getIdentityScope().clear();
        proyectoDaoConfig.getIdentityScope().clear();
        viajeDaoConfig.getIdentityScope().clear();
        especimenDaoConfig.getIdentityScope().clear();
        colorEspecimenDaoConfig.getIdentityScope().clear();
        colorMunsellDaoConfig.getIdentityScope().clear();
        florDaoConfig.getIdentityScope().clear();
        fotografiaDaoConfig.getIdentityScope().clear();
        frutoDaoConfig.getIdentityScope().clear();
        habitatDaoConfig.getIdentityScope().clear();
        fenologiaDaoConfig.getIdentityScope().clear();
        habitoDaoConfig.getIdentityScope().clear();
        hojaDaoConfig.getIdentityScope().clear();
        inflorescenciaDaoConfig.getIdentityScope().clear();
        raizDaoConfig.getIdentityScope().clear();
        talloDaoConfig.getIdentityScope().clear();
        muestraAsociadaDaoConfig.getIdentityScope().clear();
        identidadTaxonomicaDaoConfig.getIdentityScope().clear();
        nombreComunDaoConfig.getIdentityScope().clear();
        taxonDaoConfig.getIdentityScope().clear();
        usoDaoConfig.getIdentityScope().clear();
        localidadDaoConfig.getIdentityScope().clear();
        regionDaoConfig.getIdentityScope().clear();
    }

    public PersonaDao getPersonaDao() {
        return personaDao;
    }

    public UsuarioDao getUsuarioDao() {
        return usuarioDao;
    }

    public ColectorPrincipalDao getColectorPrincipalDao() {
        return colectorPrincipalDao;
    }

    public ColectorSecundarioDao getColectorSecundarioDao() {
        return colectorSecundarioDao;
    }

    public ProyectoDao getProyectoDao() {
        return proyectoDao;
    }

    public ViajeDao getViajeDao() {
        return viajeDao;
    }

    public EspecimenDao getEspecimenDao() {
        return especimenDao;
    }

    public ColorEspecimenDao getColorEspecimenDao() {
        return colorEspecimenDao;
    }

    public ColorMunsellDao getColorMunsellDao() {
        return colorMunsellDao;
    }

    public FlorDao getFlorDao() {
        return florDao;
    }

    public FotografiaDao getFotografiaDao() {
        return fotografiaDao;
    }

    public FrutoDao getFrutoDao() {
        return frutoDao;
    }

    public HabitatDao getHabitatDao() {
        return habitatDao;
    }

    public FenologiaDao getFenologiaDao() {
        return fenologiaDao;
    }

    public HabitoDao getHabitoDao() {
        return habitoDao;
    }

    public HojaDao getHojaDao() {
        return hojaDao;
    }

    public InflorescenciaDao getInflorescenciaDao() {
        return inflorescenciaDao;
    }

    public RaizDao getRaizDao() {
        return raizDao;
    }

    public TalloDao getTalloDao() {
        return talloDao;
    }

    public MuestraAsociadaDao getMuestraAsociadaDao() {
        return muestraAsociadaDao;
    }

    public IdentidadTaxonomicaDao getIdentidadTaxonomicaDao() {
        return identidadTaxonomicaDao;
    }

    public NombreComunDao getNombreComunDao() {
        return nombreComunDao;
    }

    public TaxonDao getTaxonDao() {
        return taxonDao;
    }

    public UsoDao getUsoDao() {
        return usoDao;
    }

    public LocalidadDao getLocalidadDao() {
        return localidadDao;
    }

    public RegionDao getRegionDao() {
        return regionDao;
    }

}

package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import edu.udistrital.plantae.logicadominio.datosespecimen.Especimen;
import edu.udistrital.plantae.logicadominio.recoleccion.ColectorPrincipal;
import edu.udistrital.plantae.logicadominio.recoleccion.Recoleccion;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECOLECCION.
*/
public class RecoleccionDao extends AbstractDao<Recoleccion, Long> {

    public static final String TABLENAME = "RECOLECCION";

    /**
     * Properties of entity Recoleccion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FechaInicial = new Property(1, java.util.Date.class, "fechaInicial", false, "FECHA_INICIAL");
        public final static Property FechaFinal = new Property(2, java.util.Date.class, "fechaFinal", false, "FECHA_FINAL");
        public final static Property MetodoColeccion = new Property(3, String.class, "metodoColeccion", false, "METODO_COLECCION");
        public final static Property EstacionDelAño = new Property(4, String.class, "estacionDelAño", false, "ESTACION_DEL_AÑO");
        public final static Property ViajeID = new Property(5, long.class, "viajeID", false, "VIAJE_ID");
        public final static Property ColectorPrincipalID = new Property(6, long.class, "colectorPrincipalID", false, "COLECTOR_PRINCIPAL_ID");
        public final static Property EspecimenID = new Property(7, Long.class, "especimenID", false, "ESPECIMEN_ID");
    };

    private DaoSession daoSession;

    private Query<Recoleccion> colectorPrincipal_RecoleccionesQuery;
    private Query<Recoleccion> viaje_RecoleccionesQuery;

    public RecoleccionDao(DaoConfig config) {
        super(config);
    }
    
    public RecoleccionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECOLECCION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FECHA_INICIAL' INTEGER," + // 1: fechaInicial
                "'FECHA_FINAL' INTEGER," + // 2: fechaFinal
                "'METODO_COLECCION' TEXT," + // 3: metodoColeccion
                "'ESTACION_DEL_AÑO' TEXT," + // 4: estacionDelAño
                "'VIAJE_ID' INTEGER NOT NULL ," + // 5: viajeID
                "'COLECTOR_PRINCIPAL_ID' INTEGER NOT NULL ," + // 6: colectorPrincipalID
                "'ESPECIMEN_ID' INTEGER);"); // 7: especimenID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_RECOLECCION_VIAJE_ID ON RECOLECCION" +
                " (VIAJE_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_RECOLECCION_COLECTOR_PRINCIPAL_ID ON RECOLECCION" +
                " (COLECTOR_PRINCIPAL_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_RECOLECCION_ESPECIMEN_ID ON RECOLECCION" +
                " (ESPECIMEN_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECOLECCION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Recoleccion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date fechaInicial = entity.getFechaInicial();
        if (fechaInicial != null) {
            stmt.bindLong(2, fechaInicial.getTime());
        }
 
        java.util.Date fechaFinal = entity.getFechaFinal();
        if (fechaFinal != null) {
            stmt.bindLong(3, fechaFinal.getTime());
        }
 
        String metodoColeccion = entity.getMetodoColeccion();
        if (metodoColeccion != null) {
            stmt.bindString(4, metodoColeccion);
        }
 
        String estacionDelAño = entity.getEstacionDelAño();
        if (estacionDelAño != null) {
            stmt.bindString(5, estacionDelAño);
        }
        stmt.bindLong(6, entity.getViajeID());
        stmt.bindLong(7, entity.getColectorPrincipalID());
 
        Long especimenID = entity.getEspecimenID();
        if (especimenID != null) {
            stmt.bindLong(8, especimenID);
        }
    }

    @Override
    protected void attachEntity(Recoleccion entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Recoleccion readEntity(Cursor cursor, int offset) {
        Recoleccion entity = new Recoleccion();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Recoleccion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFechaInicial(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setFechaFinal(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMetodoColeccion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstacionDelAño(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setViajeID(cursor.getLong(offset + 5));
        entity.setColectorPrincipalID(cursor.getLong(offset + 6));
        entity.setEspecimenID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Recoleccion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Recoleccion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "recolecciones" to-many relationship of ColectorPrincipal. */
    public List<Recoleccion> _queryColectorPrincipal_Recolecciones(long colectorPrincipalID) {
        synchronized (this) {
            if (colectorPrincipal_RecoleccionesQuery == null) {
                QueryBuilder<Recoleccion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ColectorPrincipalID.eq(null));
                colectorPrincipal_RecoleccionesQuery = queryBuilder.build();
            }
        }
        Query<Recoleccion> query = colectorPrincipal_RecoleccionesQuery.forCurrentThread();
        query.setParameter(0, colectorPrincipalID);
        return query.list();
    }

    /** Internal query to resolve the "recolecciones" to-many relationship of Viaje. */
    public List<Recoleccion> _queryViaje_Recolecciones(long viajeID) {
        synchronized (this) {
            if (viaje_RecoleccionesQuery == null) {
                QueryBuilder<Recoleccion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ViajeID.eq(null));
                viaje_RecoleccionesQuery = queryBuilder.build();
            }
        }
        Query<Recoleccion> query = viaje_RecoleccionesQuery.forCurrentThread();
        query.setParameter(0, viajeID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getColectorPrincipalDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEspecimenDao().getAllColumns());
            builder.append(" FROM RECOLECCION T");
            builder.append(" LEFT JOIN COLECTOR_PRINCIPAL T0 ON T.'COLECTOR_PRINCIPAL_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ESPECIMEN T1 ON T.'ESPECIMEN_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Recoleccion loadCurrentDeep(Cursor cursor, boolean lock) {
        Recoleccion entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ColectorPrincipal colectorPrincipal = loadCurrentOther(daoSession.getColectorPrincipalDao(), cursor, offset);
         if(colectorPrincipal != null) {
            entity.setColectorPrincipal(colectorPrincipal);
        }
        offset += daoSession.getColectorPrincipalDao().getAllColumns().length;

        Especimen especimen = loadCurrentOther(daoSession.getEspecimenDao(), cursor, offset);
        entity.setEspecimen(especimen);

        return entity;    
    }

    public Recoleccion loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Recoleccion> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Recoleccion> list = new ArrayList<Recoleccion>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Recoleccion> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Recoleccion> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

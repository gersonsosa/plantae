package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import edu.udistrital.plantae.logicadominio.datosespecimen.Habitat;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HABITAT.
*/
public class HabitatDao extends AbstractDao<Habitat, Long> {

    public static final String TABLENAME = "HABITAT";

    /**
     * Properties of entity Habitat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EspeciesAsociadas = new Property(1, String.class, "especiesAsociadas", false, "ESPECIES_ASOCIADAS");
        public final static Property SueloSustrato = new Property(2, String.class, "sueloSustrato", false, "SUELO_SUSTRATO");
        public final static Property Vegetacion = new Property(3, String.class, "vegetacion", false, "VEGETACION");
        public final static Property HabitatsID = new Property(4, Long.class, "habitatsID", false, "HABITATS_ID");
    };

    private Query<Habitat> habitats_DataQuery;

    public HabitatDao(DaoConfig config) {
        super(config);
    }
    
    public HabitatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HABITAT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ESPECIES_ASOCIADAS' TEXT," + // 1: especiesAsociadas
                "'SUELO_SUSTRATO' TEXT," + // 2: sueloSustrato
                "'VEGETACION' TEXT," + // 3: vegetacion
                "'HABITATS_ID' INTEGER);"); // 4: habitatsID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_HABITAT_HABITATS_ID ON HABITAT" +
                " (HABITATS_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HABITAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Habitat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String especiesAsociadas = entity.getEspeciesAsociadas();
        if (especiesAsociadas != null) {
            stmt.bindString(2, especiesAsociadas);
        }
 
        String sueloSustrato = entity.getSueloSustrato();
        if (sueloSustrato != null) {
            stmt.bindString(3, sueloSustrato);
        }
 
        String vegetacion = entity.getVegetacion();
        if (vegetacion != null) {
            stmt.bindString(4, vegetacion);
        }
 
        Long habitatsID = entity.getHabitatsID();
        if (habitatsID != null) {
            stmt.bindLong(5, habitatsID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Habitat readEntity(Cursor cursor, int offset) {
        Habitat entity = new Habitat();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Habitat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEspeciesAsociadas(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSueloSustrato(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVegetacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHabitatsID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Habitat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Habitat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of Habitats. */
    public List<Habitat> _queryHabitats_Data(Long habitatsID) {
        synchronized (this) {
            if (habitats_DataQuery == null) {
                QueryBuilder<Habitat> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HabitatsID.eq(null));
                habitats_DataQuery = queryBuilder.build();
            }
        }
        Query<Habitat> query = habitats_DataQuery.forCurrentThread();
        query.setParameter(0, habitatsID);
        return query.list();
    }

}

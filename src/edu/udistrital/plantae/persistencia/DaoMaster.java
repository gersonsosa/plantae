package edu.udistrital.plantae.persistencia;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        PersonaDao.createTable(db, ifNotExists);
        UsuarioDao.createTable(db, ifNotExists);
        ColectorPrincipalDao.createTable(db, ifNotExists);
        ColectorSecundarioDao.createTable(db, ifNotExists);
        ProyectoDao.createTable(db, ifNotExists);
        ViajeDao.createTable(db, ifNotExists);
        EspecimenDao.createTable(db, ifNotExists);
        ColorEspecimenDao.createTable(db, ifNotExists);
        ColorMunsellDao.createTable(db, ifNotExists);
        FlorDao.createTable(db, ifNotExists);
        FotografiaDao.createTable(db, ifNotExists);
        FrutoDao.createTable(db, ifNotExists);
        HabitatDao.createTable(db, ifNotExists);
        FenologiaDao.createTable(db, ifNotExists);
        HabitoDao.createTable(db, ifNotExists);
        HojaDao.createTable(db, ifNotExists);
        InflorescenciaDao.createTable(db, ifNotExists);
        RaizDao.createTable(db, ifNotExists);
        TalloDao.createTable(db, ifNotExists);
        MuestraAsociadaDao.createTable(db, ifNotExists);
        IdentidadTaxonomicaDao.createTable(db, ifNotExists);
        NombreComunDao.createTable(db, ifNotExists);
        TaxonDao.createTable(db, ifNotExists);
        UsoDao.createTable(db, ifNotExists);
        LocalidadDao.createTable(db, ifNotExists);
        RegionDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        PersonaDao.dropTable(db, ifExists);
        UsuarioDao.dropTable(db, ifExists);
        ColectorPrincipalDao.dropTable(db, ifExists);
        ColectorSecundarioDao.dropTable(db, ifExists);
        ProyectoDao.dropTable(db, ifExists);
        ViajeDao.dropTable(db, ifExists);
        EspecimenDao.dropTable(db, ifExists);
        ColorEspecimenDao.dropTable(db, ifExists);
        ColorMunsellDao.dropTable(db, ifExists);
        FlorDao.dropTable(db, ifExists);
        FotografiaDao.dropTable(db, ifExists);
        FrutoDao.dropTable(db, ifExists);
        HabitatDao.dropTable(db, ifExists);
        FenologiaDao.dropTable(db, ifExists);
        HabitoDao.dropTable(db, ifExists);
        HojaDao.dropTable(db, ifExists);
        InflorescenciaDao.dropTable(db, ifExists);
        RaizDao.dropTable(db, ifExists);
        TalloDao.dropTable(db, ifExists);
        MuestraAsociadaDao.dropTable(db, ifExists);
        IdentidadTaxonomicaDao.dropTable(db, ifExists);
        NombreComunDao.dropTable(db, ifExists);
        TaxonDao.dropTable(db, ifExists);
        UsoDao.dropTable(db, ifExists);
        LocalidadDao.dropTable(db, ifExists);
        RegionDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(PersonaDao.class);
        registerDaoClass(UsuarioDao.class);
        registerDaoClass(ColectorPrincipalDao.class);
        registerDaoClass(ColectorSecundarioDao.class);
        registerDaoClass(ProyectoDao.class);
        registerDaoClass(ViajeDao.class);
        registerDaoClass(EspecimenDao.class);
        registerDaoClass(ColorEspecimenDao.class);
        registerDaoClass(ColorMunsellDao.class);
        registerDaoClass(FlorDao.class);
        registerDaoClass(FotografiaDao.class);
        registerDaoClass(FrutoDao.class);
        registerDaoClass(HabitatDao.class);
        registerDaoClass(FenologiaDao.class);
        registerDaoClass(HabitoDao.class);
        registerDaoClass(HojaDao.class);
        registerDaoClass(InflorescenciaDao.class);
        registerDaoClass(RaizDao.class);
        registerDaoClass(TalloDao.class);
        registerDaoClass(MuestraAsociadaDao.class);
        registerDaoClass(IdentidadTaxonomicaDao.class);
        registerDaoClass(NombreComunDao.class);
        registerDaoClass(TaxonDao.class);
        registerDaoClass(UsoDao.class);
        registerDaoClass(LocalidadDao.class);
        registerDaoClass(RegionDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}

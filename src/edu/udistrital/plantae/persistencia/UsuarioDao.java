package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import edu.udistrital.plantae.logicadominio.autenticacion.Usuario;
import edu.udistrital.plantae.logicadominio.listasparametros.Colores;
import edu.udistrital.plantae.logicadominio.listasparametros.Habitats;
import edu.udistrital.plantae.logicadominio.listasparametros.Habitos;
import edu.udistrital.plantae.logicadominio.listasparametros.Usos;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USUARIO.
*/
public class UsuarioDao extends AbstractDao<Usuario, Long> {

    public static final String TABLENAME = "USUARIO";

    /**
     * Properties of entity Usuario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NombreUsuario = new Property(1, String.class, "nombreUsuario", false, "NOMBRE_USUARIO");
        public final static Property Contraseña = new Property(2, String.class, "contraseña", false, "CONTRASEÑA");
        public final static Property ColoresID = new Property(3, Long.class, "coloresID", false, "COLORES_ID");
        public final static Property HabitatsID = new Property(4, Long.class, "habitatsID", false, "HABITATS_ID");
        public final static Property HabitosID = new Property(5, Long.class, "habitosID", false, "HABITOS_ID");
        public final static Property UsosID = new Property(6, Long.class, "usosID", false, "USOS_ID");
    };

    private DaoSession daoSession;


    public UsuarioDao(DaoConfig config) {
        super(config);
    }
    
    public UsuarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USUARIO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOMBRE_USUARIO' TEXT UNIQUE ," + // 1: nombreUsuario
                "'CONTRASEÑA' TEXT," + // 2: contraseña
                "'COLORES_ID' INTEGER," + // 3: coloresID
                "'HABITATS_ID' INTEGER," + // 4: habitatsID
                "'HABITOS_ID' INTEGER," + // 5: habitosID
                "'USOS_ID' INTEGER);"); // 6: usosID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_USUARIO_NOMBRE_USUARIO ON USUARIO" +
                " (NOMBRE_USUARIO);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USUARIO_COLORES_ID ON USUARIO" +
                " (COLORES_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USUARIO_HABITATS_ID ON USUARIO" +
                " (HABITATS_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USUARIO_HABITOS_ID ON USUARIO" +
                " (HABITOS_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USUARIO_USOS_ID ON USUARIO" +
                " (USOS_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USUARIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombreUsuario = entity.getNombreUsuario();
        if (nombreUsuario != null) {
            stmt.bindString(2, nombreUsuario);
        }
 
        String contraseña = entity.getContraseña();
        if (contraseña != null) {
            stmt.bindString(3, contraseña);
        }
 
        Long coloresID = entity.getColoresID();
        if (coloresID != null) {
            stmt.bindLong(4, coloresID);
        }
 
        Long habitatsID = entity.getHabitatsID();
        if (habitatsID != null) {
            stmt.bindLong(5, habitatsID);
        }
 
        Long habitosID = entity.getHabitosID();
        if (habitosID != null) {
            stmt.bindLong(6, habitosID);
        }
 
        Long usosID = entity.getUsosID();
        if (usosID != null) {
            stmt.bindLong(7, usosID);
        }
    }

    @Override
    protected void attachEntity(Usuario entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Usuario readEntity(Cursor cursor, int offset) {
        Usuario entity = Usuario.getUsuario(null, null);
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Usuario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombreUsuario(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContraseña(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColoresID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setHabitatsID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setHabitosID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUsosID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Usuario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Usuario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getColoresDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getHabitatsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getHabitosDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getUsosDao().getAllColumns());
            builder.append(" FROM USUARIO T");
            builder.append(" LEFT JOIN COLORES T0 ON T.'COLORES_ID'=T0.'_id'");
            builder.append(" LEFT JOIN HABITATS T1 ON T.'HABITATS_ID'=T1.'_id'");
            builder.append(" LEFT JOIN HABITOS T2 ON T.'HABITOS_ID'=T2.'_id'");
            builder.append(" LEFT JOIN USOS T3 ON T.'USOS_ID'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Usuario loadCurrentDeep(Cursor cursor, boolean lock) {
        Usuario entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Colores colores = loadCurrentOther(daoSession.getColoresDao(), cursor, offset);
        entity.setColores(colores);
        offset += daoSession.getColoresDao().getAllColumns().length;

        Habitats habitats = loadCurrentOther(daoSession.getHabitatsDao(), cursor, offset);
        entity.setHabitats(habitats);
        offset += daoSession.getHabitatsDao().getAllColumns().length;

        Habitos habitos = loadCurrentOther(daoSession.getHabitosDao(), cursor, offset);
        entity.setHabitos(habitos);
        offset += daoSession.getHabitosDao().getAllColumns().length;

        Usos usos = loadCurrentOther(daoSession.getUsosDao(), cursor, offset);
        entity.setUsos(usos);

        return entity;    
    }

    public Usuario loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Usuario> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Usuario> list = new ArrayList<Usuario>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Usuario> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Usuario> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import edu.udistrital.plantae.logicadominio.datosespecimen.Fotografia;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOTOGRAFIA.
*/
public class FotografiaDao extends AbstractDao<Fotografia, Long> {

    public static final String TABLENAME = "FOTOGRAFIA";

    /**
     * Properties of entity Fotografia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RutaArchivo = new Property(1, String.class, "rutaArchivo", false, "RUTA_ARCHIVO");
        public final static Property Contexto = new Property(2, String.class, "contexto", false, "CONTEXTO");
        public final static Property EspecimenID = new Property(3, Long.class, "especimenID", false, "ESPECIMEN_ID");
    };

    private Query<Fotografia> especimen_FotografiasQuery;

    public FotografiaDao(DaoConfig config) {
        super(config);
    }
    
    public FotografiaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOTOGRAFIA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'RUTA_ARCHIVO' TEXT," + // 1: rutaArchivo
                "'CONTEXTO' TEXT," + // 2: contexto
                "'ESPECIMEN_ID' INTEGER);"); // 3: especimenID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOTOGRAFIA_CONTEXTO ON FOTOGRAFIA" +
                " (CONTEXTO);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOTOGRAFIA_ESPECIMEN_ID ON FOTOGRAFIA" +
                " (ESPECIMEN_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOTOGRAFIA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Fotografia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rutaArchivo = entity.getRutaArchivo();
        if (rutaArchivo != null) {
            stmt.bindString(2, rutaArchivo);
        }
 
        String contexto = entity.getContexto();
        if (contexto != null) {
            stmt.bindString(3, contexto);
        }
 
        Long especimenID = entity.getEspecimenID();
        if (especimenID != null) {
            stmt.bindLong(4, especimenID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Fotografia readEntity(Cursor cursor, int offset) {
        Fotografia entity = new Fotografia();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Fotografia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRutaArchivo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContexto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEspecimenID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Fotografia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Fotografia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fotografias" to-many relationship of Especimen. */
    public List<Fotografia> _queryEspecimen_Fotografias(Long especimenID) {
        synchronized (this) {
            if (especimen_FotografiasQuery == null) {
                QueryBuilder<Fotografia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EspecimenID.eq(null));
                especimen_FotografiasQuery = queryBuilder.build();
            }
        }
        Query<Fotografia> query = especimen_FotografiasQuery.forCurrentThread();
        query.setParameter(0, especimenID);
        return query.list();
    }

}

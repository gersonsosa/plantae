package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import edu.udistrital.plantae.logicadominio.datosespecimen.MuestraAsociada;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUESTRA_ASOCIADA.
*/
public class MuestraAsociadaDao extends AbstractDao<MuestraAsociada, Long> {

    public static final String TABLENAME = "MUESTRA_ASOCIADA";

    /**
     * Properties of entity MuestraAsociada.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property MetodoDeTratamiento = new Property(2, String.class, "metodoDeTratamiento", false, "METODO_DE_TRATAMIENTO");
        public final static Property EspecimenID = new Property(3, Long.class, "especimenID", false, "ESPECIMEN_ID");
    };

    private Query<MuestraAsociada> especimen_MuestrasAsociadasQuery;

    public MuestraAsociadaDao(DaoConfig config) {
        super(config);
    }
    
    public MuestraAsociadaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUESTRA_ASOCIADA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESCRIPCION' TEXT," + // 1: descripcion
                "'METODO_DE_TRATAMIENTO' TEXT," + // 2: metodoDeTratamiento
                "'ESPECIMEN_ID' INTEGER);"); // 3: especimenID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MUESTRA_ASOCIADA_ESPECIMEN_ID ON MUESTRA_ASOCIADA" +
                " (ESPECIMEN_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUESTRA_ASOCIADA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MuestraAsociada entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(2, descripcion);
        }
 
        String metodoDeTratamiento = entity.getMetodoDeTratamiento();
        if (metodoDeTratamiento != null) {
            stmt.bindString(3, metodoDeTratamiento);
        }
 
        Long especimenID = entity.getEspecimenID();
        if (especimenID != null) {
            stmt.bindLong(4, especimenID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MuestraAsociada readEntity(Cursor cursor, int offset) {
        MuestraAsociada entity = new MuestraAsociada();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MuestraAsociada entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescripcion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMetodoDeTratamiento(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEspecimenID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MuestraAsociada entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MuestraAsociada entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "muestrasAsociadas" to-many relationship of Especimen. */
    public List<MuestraAsociada> _queryEspecimen_MuestrasAsociadas(Long especimenID) {
        synchronized (this) {
            if (especimen_MuestrasAsociadasQuery == null) {
                QueryBuilder<MuestraAsociada> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EspecimenID.eq(null));
                especimen_MuestrasAsociadasQuery = queryBuilder.build();
            }
        }
        Query<MuestraAsociada> query = especimen_MuestrasAsociadasQuery.forCurrentThread();
        query.setParameter(0, especimenID);
        return query.list();
    }

}

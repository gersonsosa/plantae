package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import edu.udistrital.plantae.logicadominio.recoleccion.Proyecto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROYECTO.
*/
public class ProyectoDao extends AbstractDao<Proyecto, Long> {

    public static final String TABLENAME = "PROYECTO";

    /**
     * Properties of entity Proyecto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property AgenciaFinanciera = new Property(2, String.class, "agenciaFinanciera", false, "AGENCIA_FINANCIERA");
        public final static Property AgenciaEjecutora = new Property(3, String.class, "agenciaEjecutora", false, "AGENCIA_EJECUTORA");
        public final static Property NumeroConvenio = new Property(4, String.class, "numeroConvenio", false, "NUMERO_CONVENIO");
        public final static Property PermisoColeccion = new Property(5, String.class, "permisoColeccion", false, "PERMISO_COLECCION");
        public final static Property NumeroPermiso = new Property(6, String.class, "numeroPermiso", false, "NUMERO_PERMISO");
        public final static Property EmisorPermiso = new Property(7, String.class, "emisorPermiso", false, "EMISOR_PERMISO");
        public final static Property ColectorPrincipalID = new Property(8, Long.class, "colectorPrincipalID", false, "COLECTOR_PRINCIPAL_ID");
    };

    private DaoSession daoSession;

    private Query<Proyecto> colectorPrincipal_ProyectosQuery;

    public ProyectoDao(DaoConfig config) {
        super(config);
    }
    
    public ProyectoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROYECTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOMBRE' TEXT," + // 1: nombre
                "'AGENCIA_FINANCIERA' TEXT," + // 2: agenciaFinanciera
                "'AGENCIA_EJECUTORA' TEXT," + // 3: agenciaEjecutora
                "'NUMERO_CONVENIO' TEXT," + // 4: numeroConvenio
                "'PERMISO_COLECCION' TEXT," + // 5: permisoColeccion
                "'NUMERO_PERMISO' TEXT," + // 6: numeroPermiso
                "'EMISOR_PERMISO' TEXT," + // 7: emisorPermiso
                "'COLECTOR_PRINCIPAL_ID' INTEGER);"); // 8: colectorPrincipalID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PROYECTO_NOMBRE ON PROYECTO" +
                " (NOMBRE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_PROYECTO_COLECTOR_PRINCIPAL_ID ON PROYECTO" +
                " (COLECTOR_PRINCIPAL_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROYECTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Proyecto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String agenciaFinanciera = entity.getAgenciaFinanciera();
        if (agenciaFinanciera != null) {
            stmt.bindString(3, agenciaFinanciera);
        }
 
        String agenciaEjecutora = entity.getAgenciaEjecutora();
        if (agenciaEjecutora != null) {
            stmt.bindString(4, agenciaEjecutora);
        }
 
        String numeroConvenio = entity.getNumeroConvenio();
        if (numeroConvenio != null) {
            stmt.bindString(5, numeroConvenio);
        }
 
        String permisoColeccion = entity.getPermisoColeccion();
        if (permisoColeccion != null) {
            stmt.bindString(6, permisoColeccion);
        }
 
        String numeroPermiso = entity.getNumeroPermiso();
        if (numeroPermiso != null) {
            stmt.bindString(7, numeroPermiso);
        }
 
        String emisorPermiso = entity.getEmisorPermiso();
        if (emisorPermiso != null) {
            stmt.bindString(8, emisorPermiso);
        }
 
        Long colectorPrincipalID = entity.getColectorPrincipalID();
        if (colectorPrincipalID != null) {
            stmt.bindLong(9, colectorPrincipalID);
        }
    }

    @Override
    protected void attachEntity(Proyecto entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Proyecto readEntity(Cursor cursor, int offset) {
        Proyecto entity = new Proyecto();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Proyecto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAgenciaFinanciera(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAgenciaEjecutora(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumeroConvenio(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPermisoColeccion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNumeroPermiso(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmisorPermiso(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setColectorPrincipalID(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Proyecto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Proyecto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "proyectos" to-many relationship of ColectorPrincipal. */
    public List<Proyecto> _queryColectorPrincipal_Proyectos(Long colectorPrincipalID) {
        synchronized (this) {
            if (colectorPrincipal_ProyectosQuery == null) {
                QueryBuilder<Proyecto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ColectorPrincipalID.eq(null));
                colectorPrincipal_ProyectosQuery = queryBuilder.build();
            }
        }
        Query<Proyecto> query = colectorPrincipal_ProyectosQuery.forCurrentThread();
        query.setParameter(0, colectorPrincipalID);
        return query.list();
    }

}

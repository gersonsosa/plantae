package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import edu.udistrital.plantae.logicadominio.datosespecimen.ColorMunsell;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COLOR_MUNSELL.
*/
public class ColorMunsellDao extends AbstractDao<ColorMunsell, Long> {

    public static final String TABLENAME = "COLOR_MUNSELL";

    /**
     * Properties of entity ColorMunsell.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hue = new Property(1, Integer.class, "hue", false, "HUE");
        public final static Property Value = new Property(2, Integer.class, "value", false, "VALUE");
        public final static Property Chroma = new Property(3, Integer.class, "chroma", false, "CHROMA");
    };


    public ColorMunsellDao(DaoConfig config) {
        super(config);
    }
    
    public ColorMunsellDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COLOR_MUNSELL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'HUE' INTEGER," + // 1: hue
                "'VALUE' INTEGER," + // 2: value
                "'CHROMA' INTEGER);"); // 3: chroma
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COLOR_MUNSELL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ColorMunsell entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer hue = entity.getHue();
        if (hue != null) {
            stmt.bindLong(2, hue);
        }
 
        Integer value = entity.getValue();
        if (value != null) {
            stmt.bindLong(3, value);
        }
 
        Integer chroma = entity.getChroma();
        if (chroma != null) {
            stmt.bindLong(4, chroma);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ColorMunsell readEntity(Cursor cursor, int offset) {
        ColorMunsell entity = new ColorMunsell();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ColorMunsell entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHue(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setChroma(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ColorMunsell entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ColorMunsell entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import edu.udistrital.plantae.logicadominio.datosespecimen.ColorEspecimen;
import edu.udistrital.plantae.logicadominio.datosespecimen.Flor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FLOR.
*/
public class FlorDao extends AbstractDao<Flor, Long> {

    public static final String TABLENAME = "FLOR";

    /**
     * Properties of entity Flor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property ColorDeLaCorolaID = new Property(2, Long.class, "colorDeLaCorolaID", false, "COLOR_DE_LA_COROLA_ID");
        public final static Property ColorDelCalizID = new Property(3, Long.class, "colorDelCalizID", false, "COLOR_DEL_CALIZ_ID");
        public final static Property ColorDelGineceoID = new Property(4, Long.class, "colorDelGineceoID", false, "COLOR_DEL_GINECEO_ID");
        public final static Property ColorDeLosEstambresID = new Property(5, Long.class, "colorDeLosEstambresID", false, "COLOR_DE_LOS_ESTAMBRES_ID");
        public final static Property ColorDeLosEstigmasID = new Property(6, Long.class, "colorDeLosEstigmasID", false, "COLOR_DE_LOS_ESTIGMAS_ID");
        public final static Property ColorDeLosPistiliodiosID = new Property(7, Long.class, "colorDeLosPistiliodiosID", false, "COLOR_DE_LOS_PISTILIODIOS_ID");
    };

    private DaoSession daoSession;


    public FlorDao(DaoConfig config) {
        super(config);
    }
    
    public FlorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FLOR' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESCRIPCION' TEXT," + // 1: descripcion
                "'COLOR_DE_LA_COROLA_ID' INTEGER," + // 2: colorDeLaCorolaID
                "'COLOR_DEL_CALIZ_ID' INTEGER," + // 3: colorDelCalizID
                "'COLOR_DEL_GINECEO_ID' INTEGER," + // 4: colorDelGineceoID
                "'COLOR_DE_LOS_ESTAMBRES_ID' INTEGER," + // 5: colorDeLosEstambresID
                "'COLOR_DE_LOS_ESTIGMAS_ID' INTEGER," + // 6: colorDeLosEstigmasID
                "'COLOR_DE_LOS_PISTILIODIOS_ID' INTEGER);"); // 7: colorDeLosPistiliodiosID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FLOR_COLOR_DE_LA_COROLA_ID ON FLOR" +
                " (COLOR_DE_LA_COROLA_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FLOR_COLOR_DEL_CALIZ_ID ON FLOR" +
                " (COLOR_DEL_CALIZ_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FLOR_COLOR_DEL_GINECEO_ID ON FLOR" +
                " (COLOR_DEL_GINECEO_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FLOR_COLOR_DE_LOS_ESTAMBRES_ID ON FLOR" +
                " (COLOR_DE_LOS_ESTAMBRES_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FLOR_COLOR_DE_LOS_ESTIGMAS_ID ON FLOR" +
                " (COLOR_DE_LOS_ESTIGMAS_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FLOR_COLOR_DE_LOS_PISTILIODIOS_ID ON FLOR" +
                " (COLOR_DE_LOS_PISTILIODIOS_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FLOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Flor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(2, descripcion);
        }
 
        Long colorDeLaCorolaID = entity.getColorDeLaCorolaID();
        if (colorDeLaCorolaID != null) {
            stmt.bindLong(3, colorDeLaCorolaID);
        }
 
        Long colorDelCalizID = entity.getColorDelCalizID();
        if (colorDelCalizID != null) {
            stmt.bindLong(4, colorDelCalizID);
        }
 
        Long colorDelGineceoID = entity.getColorDelGineceoID();
        if (colorDelGineceoID != null) {
            stmt.bindLong(5, colorDelGineceoID);
        }
 
        Long colorDeLosEstambresID = entity.getColorDeLosEstambresID();
        if (colorDeLosEstambresID != null) {
            stmt.bindLong(6, colorDeLosEstambresID);
        }
 
        Long colorDeLosEstigmasID = entity.getColorDeLosEstigmasID();
        if (colorDeLosEstigmasID != null) {
            stmt.bindLong(7, colorDeLosEstigmasID);
        }
 
        Long colorDeLosPistiliodiosID = entity.getColorDeLosPistiliodiosID();
        if (colorDeLosPistiliodiosID != null) {
            stmt.bindLong(8, colorDeLosPistiliodiosID);
        }
    }

    @Override
    protected void attachEntity(Flor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Flor readEntity(Cursor cursor, int offset) {
        Flor entity = new Flor();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Flor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescripcion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setColorDeLaCorolaID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setColorDelCalizID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setColorDelGineceoID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setColorDeLosEstambresID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setColorDeLosEstigmasID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setColorDeLosPistiliodiosID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Flor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Flor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getColorEspecimenDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getColorEspecimenDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getColorEspecimenDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getColorEspecimenDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getColorEspecimenDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getColorEspecimenDao().getAllColumns());
            builder.append(" FROM FLOR T");
            builder.append(" LEFT JOIN COLOR_ESPECIMEN T0 ON T.'COLOR_DE_LA_COROLA_ID'=T0.'_id'");
            builder.append(" LEFT JOIN COLOR_ESPECIMEN T1 ON T.'COLOR_DEL_CALIZ_ID'=T1.'_id'");
            builder.append(" LEFT JOIN COLOR_ESPECIMEN T2 ON T.'COLOR_DEL_GINECEO_ID'=T2.'_id'");
            builder.append(" LEFT JOIN COLOR_ESPECIMEN T3 ON T.'COLOR_DE_LOS_ESTAMBRES_ID'=T3.'_id'");
            builder.append(" LEFT JOIN COLOR_ESPECIMEN T4 ON T.'COLOR_DE_LOS_ESTIGMAS_ID'=T4.'_id'");
            builder.append(" LEFT JOIN COLOR_ESPECIMEN T5 ON T.'COLOR_DE_LOS_PISTILIODIOS_ID'=T5.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Flor loadCurrentDeep(Cursor cursor, boolean lock) {
        Flor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ColorEspecimen colorDeLaCorola = loadCurrentOther(daoSession.getColorEspecimenDao(), cursor, offset);
        entity.setColorDeLaCorola(colorDeLaCorola);
        offset += daoSession.getColorEspecimenDao().getAllColumns().length;

        ColorEspecimen colorDelCaliz = loadCurrentOther(daoSession.getColorEspecimenDao(), cursor, offset);
        entity.setColorDelCaliz(colorDelCaliz);
        offset += daoSession.getColorEspecimenDao().getAllColumns().length;

        ColorEspecimen colorDelGineceo = loadCurrentOther(daoSession.getColorEspecimenDao(), cursor, offset);
        entity.setColorDelGineceo(colorDelGineceo);
        offset += daoSession.getColorEspecimenDao().getAllColumns().length;

        ColorEspecimen colorDeLosEstambres = loadCurrentOther(daoSession.getColorEspecimenDao(), cursor, offset);
        entity.setColorDeLosEstambres(colorDeLosEstambres);
        offset += daoSession.getColorEspecimenDao().getAllColumns().length;

        ColorEspecimen colorDeLosEstigmas = loadCurrentOther(daoSession.getColorEspecimenDao(), cursor, offset);
        entity.setColorDeLosEstigmas(colorDeLosEstigmas);
        offset += daoSession.getColorEspecimenDao().getAllColumns().length;

        ColorEspecimen colorDeLosPistiliodios = loadCurrentOther(daoSession.getColorEspecimenDao(), cursor, offset);
        entity.setColorDeLosPistiliodios(colorDeLosPistiliodios);

        return entity;    
    }

    public Flor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Flor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Flor> list = new ArrayList<Flor>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Flor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Flor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

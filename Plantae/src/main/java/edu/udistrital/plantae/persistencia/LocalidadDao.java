package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import edu.udistrital.plantae.logicadominio.ubicacion.Localidad;
import edu.udistrital.plantae.logicadominio.ubicacion.Region;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCALIDAD.
*/
public class LocalidadDao extends AbstractDao<Localidad, Long> {

    public static final String TABLENAME = "LOCALIDAD";

    /**
     * Properties of entity Localidad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Datum = new Property(2, String.class, "datum", false, "DATUM");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property MarcaDispositivo = new Property(4, String.class, "marcaDispositivo", false, "MARCA_DISPOSITIVO");
        public final static Property Latitud = new Property(5, Double.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(6, Double.class, "longitud", false, "LONGITUD");
        public final static Property AltitudMinima = new Property(7, Double.class, "altitudMinima", false, "ALTITUD_MINIMA");
        public final static Property AltitudMaxima = new Property(8, Double.class, "altitudMaxima", false, "ALTITUD_MAXIMA");
        public final static Property RegionID = new Property(9, long.class, "regionID", false, "REGION_ID");
    };

    private DaoSession daoSession;


    public LocalidadDao(DaoConfig config) {
        super(config);
    }
    
    public LocalidadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCALIDAD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOMBRE' TEXT," + // 1: nombre
                "'DATUM' TEXT," + // 2: datum
                "'DESCRIPCION' TEXT," + // 3: descripcion
                "'MARCA_DISPOSITIVO' TEXT," + // 4: marcaDispositivo
                "'LATITUD' REAL," + // 5: latitud
                "'LONGITUD' REAL," + // 6: longitud
                "'ALTITUD_MINIMA' REAL," + // 7: altitudMinima
                "'ALTITUD_MAXIMA' REAL," + // 8: altitudMaxima
                "'REGION_ID' INTEGER NOT NULL );"); // 9: regionID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_LOCALIDAD_NOMBRE ON LOCALIDAD" +
                " (NOMBRE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_LOCALIDAD_REGION_ID ON LOCALIDAD" +
                " (REGION_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCALIDAD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Localidad entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String datum = entity.getDatum();
        if (datum != null) {
            stmt.bindString(3, datum);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(4, descripcion);
        }
 
        String marcaDispositivo = entity.getMarcaDispositivo();
        if (marcaDispositivo != null) {
            stmt.bindString(5, marcaDispositivo);
        }
 
        Double latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(6, latitud);
        }
 
        Double longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(7, longitud);
        }
 
        Double altitudMinima = entity.getAltitudMinima();
        if (altitudMinima != null) {
            stmt.bindDouble(8, altitudMinima);
        }

        Double altitudMaxima = entity.getAltitudMaxima();
        if (altitudMaxima != null) {
            stmt.bindDouble(9, altitudMaxima);
    }
        stmt.bindLong(10, entity.getRegionID());
    }

    @Override
    protected void attachEntity(Localidad entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Localidad readEntity(Cursor cursor, int offset) {
        Localidad entity = new Localidad();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Localidad entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDatum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMarcaDispositivo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitud(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLongitud(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setAltitudMinima(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setAltitudMaxima(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setRegionID(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Localidad entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Localidad entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegionDao().getAllColumns());
            builder.append(" FROM LOCALIDAD T");
            builder.append(" LEFT JOIN REGION T0 ON T.'REGION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Localidad loadCurrentDeep(Cursor cursor, boolean lock) {
        Localidad entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }

        return entity;    
    }

    public Localidad loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Localidad> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Localidad> list = new ArrayList<Localidad>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Localidad> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Localidad> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

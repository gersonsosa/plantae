package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import edu.udistrital.plantae.logicadominio.autenticacion.Persona;
import edu.udistrital.plantae.logicadominio.datosespecimen.Especimen;
import edu.udistrital.plantae.logicadominio.taxonomia.IdentidadTaxonomica;
import edu.udistrital.plantae.logicadominio.taxonomia.Taxon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IDENTIDAD_TAXONOMICA.
*/
public class IdentidadTaxonomicaDao extends AbstractDao<IdentidadTaxonomica, Long> {

    public static final String TABLENAME = "IDENTIDAD_TAXONOMICA";

    /**
     * Properties of entity IdentidadTaxonomica.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FechaIdentificacion = new Property(1, java.util.Date.class, "fechaIdentificacion", false, "FECHA_IDENTIFICACION");
        public final static Property Tipo = new Property(2, String.class, "tipo", false, "TIPO");
        public final static Property EspecimenID = new Property(3, Long.class, "especimenID", false, "ESPECIMEN_ID");
        public final static Property TaxonID = new Property(4, long.class, "taxonID", false, "TAXON_ID");
        public final static Property PersonaID = new Property(5, Long.class, "personaID", false, "PERSONA_ID");
    };

    private DaoSession daoSession;

    private Query<IdentidadTaxonomica> especimen_DeterminacionesQuery;

    public IdentidadTaxonomicaDao(DaoConfig config) {
        super(config);
    }
    
    public IdentidadTaxonomicaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IDENTIDAD_TAXONOMICA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FECHA_IDENTIFICACION' INTEGER," + // 1: fechaIdentificacion
                "'TIPO' TEXT," + // 2: tipo
                "'ESPECIMEN_ID' INTEGER," + // 3: especimenID
                "'TAXON_ID' INTEGER NOT NULL ," + // 4: taxonID
                "'PERSONA_ID' INTEGER);"); // 5: personaID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_IDENTIDAD_TAXONOMICA_ESPECIMEN_ID ON IDENTIDAD_TAXONOMICA" +
                " (ESPECIMEN_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_IDENTIDAD_TAXONOMICA_TAXON_ID ON IDENTIDAD_TAXONOMICA" +
                " (TAXON_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_IDENTIDAD_TAXONOMICA_PERSONA_ID ON IDENTIDAD_TAXONOMICA" +
                " (PERSONA_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IDENTIDAD_TAXONOMICA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IdentidadTaxonomica entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date fechaIdentificacion = entity.getFechaIdentificacion();
        if (fechaIdentificacion != null) {
            stmt.bindLong(2, fechaIdentificacion.getTime());
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(3, tipo);
        }
 
        Long especimenID = entity.getEspecimenID();
        if (especimenID != null) {
            stmt.bindLong(4, especimenID);
        }
        stmt.bindLong(5, entity.getTaxonID());
 
        Long personaID = entity.getPersonaID();
        if (personaID != null) {
            stmt.bindLong(6, personaID);
        }
    }

    @Override
    protected void attachEntity(IdentidadTaxonomica entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IdentidadTaxonomica readEntity(Cursor cursor, int offset) {
        IdentidadTaxonomica entity = new IdentidadTaxonomica();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IdentidadTaxonomica entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFechaIdentificacion(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTipo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEspecimenID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTaxonID(cursor.getLong(offset + 4));
        entity.setPersonaID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IdentidadTaxonomica entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IdentidadTaxonomica entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "determinaciones" to-many relationship of Especimen. */
    public List<IdentidadTaxonomica> _queryEspecimen_Determinaciones(Long especimenID) {
        synchronized (this) {
            if (especimen_DeterminacionesQuery == null) {
                QueryBuilder<IdentidadTaxonomica> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EspecimenID.eq(null));
                especimen_DeterminacionesQuery = queryBuilder.build();
            }
        }
        Query<IdentidadTaxonomica> query = especimen_DeterminacionesQuery.forCurrentThread();
        query.setParameter(0, especimenID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEspecimenDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTaxonDao().getAllColumns());
            builder.append(" FROM IDENTIDAD_TAXONOMICA T");
            builder.append(" LEFT JOIN PERSONA T0 ON T.'PERSONA_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ESPECIMEN T1 ON T.'ESPECIMEN_ID'=T1.'_id'");
            builder.append(" LEFT JOIN TAXON T2 ON T.'TAXON_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected IdentidadTaxonomica loadCurrentDeep(Cursor cursor, boolean lock) {
        IdentidadTaxonomica entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Persona determinador = loadCurrentOther(daoSession.getPersonaDao(), cursor, offset);
        entity.setDeterminador(determinador);
        offset += daoSession.getPersonaDao().getAllColumns().length;

        Especimen especimen = loadCurrentOther(daoSession.getEspecimenDao(), cursor, offset);
        entity.setEspecimen(especimen);
        offset += daoSession.getEspecimenDao().getAllColumns().length;

        Taxon taxon = loadCurrentOther(daoSession.getTaxonDao(), cursor, offset);
         if(taxon != null) {
            entity.setTaxon(taxon);
        }

        return entity;    
    }

    public IdentidadTaxonomica loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<IdentidadTaxonomica> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<IdentidadTaxonomica> list = new ArrayList<IdentidadTaxonomica>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<IdentidadTaxonomica> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<IdentidadTaxonomica> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

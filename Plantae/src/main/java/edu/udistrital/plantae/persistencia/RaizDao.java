package edu.udistrital.plantae.persistencia;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import edu.udistrital.plantae.logicadominio.datosespecimen.Raiz;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RAIZ.
*/
public class RaizDao extends AbstractDao<Raiz, Long> {

    public static final String TABLENAME = "RAIZ";

    /**
     * Properties of entity Raiz.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DiametroDeLasRaices = new Property(1, String.class, "diametroDeLasRaices", false, "DIAMETRO_DE_LAS_RAICES");
        public final static Property DiametroEnLaBase = new Property(2, String.class, "diametroEnLaBase", false, "DIAMETRO_EN_LA_BASE");
        public final static Property FormaDeLasEspinas = new Property(3, String.class, "formaDeLasEspinas", false, "FORMA_DE_LAS_ESPINAS");
        public final static Property TamañoDeLasEspinas = new Property(4, String.class, "tamañoDeLasEspinas", false, "TAMAÑO_DE_LAS_ESPINAS");
        public final static Property Descripcion = new Property(5, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property RaizArmada = new Property(6, Boolean.class, "raizArmada", false, "RAIZ_ARMADA");
        public final static Property AlturaDelCono = new Property(7, Long.class, "alturaDelCono", false, "ALTURA_DEL_CONO");
    };


    public RaizDao(DaoConfig config) {
        super(config);
    }
    
    public RaizDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RAIZ' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DIAMETRO_DE_LAS_RAICES' TEXT," + // 1: diametroDeLasRaices
                "'DIAMETRO_EN_LA_BASE' TEXT," + // 2: diametroEnLaBase
                "'FORMA_DE_LAS_ESPINAS' TEXT," + // 3: formaDeLasEspinas
                "'TAMAÑO_DE_LAS_ESPINAS' TEXT," + // 4: tamañoDeLasEspinas
                "'DESCRIPCION' TEXT," + // 5: descripcion
                "'RAIZ_ARMADA' INTEGER," + // 6: raizArmada
                "'ALTURA_DEL_CONO' INTEGER);"); // 7: alturaDelCono
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RAIZ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Raiz entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String diametroDeLasRaices = entity.getDiametroDeLasRaices();
        if (diametroDeLasRaices != null) {
            stmt.bindString(2, diametroDeLasRaices);
        }
 
        String diametroEnLaBase = entity.getDiametroEnLaBase();
        if (diametroEnLaBase != null) {
            stmt.bindString(3, diametroEnLaBase);
        }
 
        String formaDeLasEspinas = entity.getFormaDeLasEspinas();
        if (formaDeLasEspinas != null) {
            stmt.bindString(4, formaDeLasEspinas);
        }
 
        String tamañoDeLasEspinas = entity.getTamañoDeLasEspinas();
        if (tamañoDeLasEspinas != null) {
            stmt.bindString(5, tamañoDeLasEspinas);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(6, descripcion);
        }
 
        Boolean raizArmada = entity.getRaizArmada();
        if (raizArmada != null) {
            stmt.bindLong(7, raizArmada ? 1l: 0l);
        }
 
        Long alturaDelCono = entity.getAlturaDelCono();
        if (alturaDelCono != null) {
            stmt.bindLong(8, alturaDelCono);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Raiz readEntity(Cursor cursor, int offset) {
        Raiz entity = new Raiz();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Raiz entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiametroDeLasRaices(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiametroEnLaBase(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFormaDeLasEspinas(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTamañoDeLasEspinas(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescripcion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRaizArmada(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setAlturaDelCono(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Raiz entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Raiz entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
